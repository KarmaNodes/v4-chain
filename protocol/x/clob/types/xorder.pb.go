// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/clob/xorder.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Individual Order ID
type XIID struct {
	ClobId   uint32 `protobuf:"varint,1,opt,name=clob_id,json=clobId,proto3" json:"clob_id,omitempty"`
	ClientId uint32 `protobuf:"fixed32,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *XIID) Reset()         { *m = XIID{} }
func (m *XIID) String() string { return proto.CompactTextString(m) }
func (*XIID) ProtoMessage()    {}
func (*XIID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4afb78a12be9d3c, []int{0}
}
func (m *XIID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XIID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XIID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XIID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XIID.Merge(m, src)
}
func (m *XIID) XXX_Size() int {
	return m.Size()
}
func (m *XIID) XXX_DiscardUnknown() {
	xxx_messageInfo_XIID.DiscardUnknown(m)
}

var xxx_messageInfo_XIID proto.InternalMessageInfo

func (m *XIID) GetClobId() uint32 {
	if m != nil {
		return m.ClobId
	}
	return 0
}

func (m *XIID) GetClientId() uint32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// Universal ID
type XUID struct {
	// SubaccountID
	// account number (5 bytes) + subaccount nonce (3 bytes)
	Sid uint64 `protobuf:"fixed64,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Iid XIID   `protobuf:"bytes,2,opt,name=iid,proto3" json:"iid"`
}

func (m *XUID) Reset()         { *m = XUID{} }
func (m *XUID) String() string { return proto.CompactTextString(m) }
func (*XUID) ProtoMessage()    {}
func (*XUID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4afb78a12be9d3c, []int{1}
}
func (m *XUID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XUID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XUID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XUID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XUID.Merge(m, src)
}
func (m *XUID) XXX_Size() int {
	return m.Size()
}
func (m *XUID) XXX_DiscardUnknown() {
	xxx_messageInfo_XUID.DiscardUnknown(m)
}

var xxx_messageInfo_XUID proto.InternalMessageInfo

func (m *XUID) GetSid() uint64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *XUID) GetIid() XIID {
	if m != nil {
		return m.Iid
	}
	return XIID{}
}

type XOrder struct {
	Uid  XUID  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	Base XBase `protobuf:"bytes,2,opt,name=base,proto3" json:"base"`
}

func (m *XOrder) Reset()         { *m = XOrder{} }
func (m *XOrder) String() string { return proto.CompactTextString(m) }
func (*XOrder) ProtoMessage()    {}
func (*XOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4afb78a12be9d3c, []int{2}
}
func (m *XOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XOrder.Merge(m, src)
}
func (m *XOrder) XXX_Size() int {
	return m.Size()
}
func (m *XOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_XOrder.DiscardUnknown(m)
}

var xxx_messageInfo_XOrder proto.InternalMessageInfo

func (m *XOrder) GetUid() XUID {
	if m != nil {
		return m.Uid
	}
	return XUID{}
}

func (m *XOrder) GetBase() XBase {
	if m != nil {
		return m.Base
	}
	return XBase{}
}

type XBase struct {
	Subticks uint64 `protobuf:"varint,1,opt,name=subticks,proto3" json:"subticks,omitempty"`
	Quantums uint64 `protobuf:"varint,2,opt,name=quantums,proto3" json:"quantums,omitempty"`
	Flags    uint32 `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Types that are valid to be assigned to XStopSubticks:
	//
	//	*XBase_StopSubticks
	XStopSubticks isXBase_XStopSubticks `protobuf_oneof:"_stop_subticks"`
	// Types that are valid to be assigned to XGoodTilTime:
	//
	//	*XBase_GoodTilTime
	XGoodTilTime isXBase_XGoodTilTime `protobuf_oneof:"_good_til_time"`
	// Types that are valid to be assigned to XOcoClientId:
	//
	//	*XBase_OcoClientId
	XOcoClientId isXBase_XOcoClientId `protobuf_oneof:"_oco_client_id"`
}

func (m *XBase) Reset()         { *m = XBase{} }
func (m *XBase) String() string { return proto.CompactTextString(m) }
func (*XBase) ProtoMessage()    {}
func (*XBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4afb78a12be9d3c, []int{3}
}
func (m *XBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBase.Merge(m, src)
}
func (m *XBase) XXX_Size() int {
	return m.Size()
}
func (m *XBase) XXX_DiscardUnknown() {
	xxx_messageInfo_XBase.DiscardUnknown(m)
}

var xxx_messageInfo_XBase proto.InternalMessageInfo

type isXBase_XStopSubticks interface {
	isXBase_XStopSubticks()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isXBase_XGoodTilTime interface {
	isXBase_XGoodTilTime()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isXBase_XOcoClientId interface {
	isXBase_XOcoClientId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type XBase_StopSubticks struct {
	StopSubticks uint64 `protobuf:"varint,4,opt,name=stop_subticks,json=stopSubticks,proto3,oneof" json:"stop_subticks,omitempty"`
}
type XBase_GoodTilTime struct {
	GoodTilTime uint32 `protobuf:"fixed32,5,opt,name=good_til_time,json=goodTilTime,proto3,oneof" json:"good_til_time,omitempty"`
}
type XBase_OcoClientId struct {
	OcoClientId uint32 `protobuf:"fixed32,6,opt,name=oco_client_id,json=ocoClientId,proto3,oneof" json:"oco_client_id,omitempty"`
}

func (*XBase_StopSubticks) isXBase_XStopSubticks() {}
func (*XBase_GoodTilTime) isXBase_XGoodTilTime()   {}
func (*XBase_OcoClientId) isXBase_XOcoClientId()   {}

func (m *XBase) GetXStopSubticks() isXBase_XStopSubticks {
	if m != nil {
		return m.XStopSubticks
	}
	return nil
}
func (m *XBase) GetXGoodTilTime() isXBase_XGoodTilTime {
	if m != nil {
		return m.XGoodTilTime
	}
	return nil
}
func (m *XBase) GetXOcoClientId() isXBase_XOcoClientId {
	if m != nil {
		return m.XOcoClientId
	}
	return nil
}

func (m *XBase) GetSubticks() uint64 {
	if m != nil {
		return m.Subticks
	}
	return 0
}

func (m *XBase) GetQuantums() uint64 {
	if m != nil {
		return m.Quantums
	}
	return 0
}

func (m *XBase) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *XBase) GetStopSubticks() uint64 {
	if x, ok := m.GetXStopSubticks().(*XBase_StopSubticks); ok {
		return x.StopSubticks
	}
	return 0
}

func (m *XBase) GetGoodTilTime() uint32 {
	if x, ok := m.GetXGoodTilTime().(*XBase_GoodTilTime); ok {
		return x.GoodTilTime
	}
	return 0
}

func (m *XBase) GetOcoClientId() uint32 {
	if x, ok := m.GetXOcoClientId().(*XBase_OcoClientId); ok {
		return x.OcoClientId
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*XBase) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*XBase_StopSubticks)(nil),
		(*XBase_GoodTilTime)(nil),
		(*XBase_OcoClientId)(nil),
	}
}

type XPlaceOrder struct {
	Iid        XIID   `protobuf:"bytes,1,opt,name=iid,proto3" json:"iid"`
	Base       XBase  `protobuf:"bytes,2,opt,name=base,proto3" json:"base"`
	PlaceFlags uint32 `protobuf:"varint,3,opt,name=place_flags,json=placeFlags,proto3" json:"place_flags,omitempty"`
}

func (m *XPlaceOrder) Reset()         { *m = XPlaceOrder{} }
func (m *XPlaceOrder) String() string { return proto.CompactTextString(m) }
func (*XPlaceOrder) ProtoMessage()    {}
func (*XPlaceOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4afb78a12be9d3c, []int{4}
}
func (m *XPlaceOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XPlaceOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XPlaceOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XPlaceOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XPlaceOrder.Merge(m, src)
}
func (m *XPlaceOrder) XXX_Size() int {
	return m.Size()
}
func (m *XPlaceOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_XPlaceOrder.DiscardUnknown(m)
}

var xxx_messageInfo_XPlaceOrder proto.InternalMessageInfo

func (m *XPlaceOrder) GetIid() XIID {
	if m != nil {
		return m.Iid
	}
	return XIID{}
}

func (m *XPlaceOrder) GetBase() XBase {
	if m != nil {
		return m.Base
	}
	return XBase{}
}

func (m *XPlaceOrder) GetPlaceFlags() uint32 {
	if m != nil {
		return m.PlaceFlags
	}
	return 0
}

func init() {
	proto.RegisterType((*XIID)(nil), "dydxprotocol.clob.XIID")
	proto.RegisterType((*XUID)(nil), "dydxprotocol.clob.XUID")
	proto.RegisterType((*XOrder)(nil), "dydxprotocol.clob.XOrder")
	proto.RegisterType((*XBase)(nil), "dydxprotocol.clob.XBase")
	proto.RegisterType((*XPlaceOrder)(nil), "dydxprotocol.clob.XPlaceOrder")
}

func init() { proto.RegisterFile("dydxprotocol/clob/xorder.proto", fileDescriptor_f4afb78a12be9d3c) }

var fileDescriptor_f4afb78a12be9d3c = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x89, 0xe3, 0x96, 0x31, 0x41, 0x65, 0x55, 0xa9, 0x51, 0x91, 0xdc, 0xca, 0x17,
	0x72, 0xc1, 0x96, 0x0a, 0xe2, 0xc4, 0x29, 0x54, 0xa8, 0x3e, 0x51, 0x2d, 0xad, 0x14, 0x71, 0xb1,
	0xec, 0xb5, 0x71, 0x57, 0xd8, 0xd9, 0x90, 0x5d, 0xa3, 0xf4, 0x09, 0xe8, 0x11, 0x89, 0x97, 0xea,
	0xb1, 0x47, 0x4e, 0x08, 0x25, 0x2f, 0x82, 0x66, 0x63, 0xb9, 0xb1, 0xf8, 0x73, 0xe0, 0xb6, 0xf3,
	0x9b, 0xf9, 0xe6, 0xb3, 0xbf, 0xd5, 0x82, 0x97, 0x5d, 0x67, 0xcb, 0xf9, 0x42, 0x6a, 0xc9, 0x65,
	0x19, 0xf2, 0x52, 0xa6, 0xe1, 0x52, 0x2e, 0xb2, 0x7c, 0x11, 0x18, 0x48, 0x1f, 0x6f, 0xf7, 0x03,
	0xec, 0x1f, 0xee, 0x17, 0xb2, 0x90, 0x06, 0x85, 0x78, 0xda, 0x0c, 0xfa, 0xaf, 0xc0, 0x9e, 0x46,
	0xd1, 0x29, 0x3d, 0x80, 0x1d, 0x9c, 0x8a, 0x45, 0x36, 0x22, 0xc7, 0x64, 0x3c, 0x64, 0x0e, 0x96,
	0x51, 0x46, 0x9f, 0xc0, 0x03, 0x5e, 0x8a, 0x7c, 0xa6, 0xb1, 0xd5, 0x3b, 0x26, 0xe3, 0x1d, 0xb6,
	0xbb, 0x01, 0x51, 0xe6, 0x47, 0x60, 0x4f, 0x2f, 0xa3, 0x53, 0xba, 0x07, 0x7d, 0xd5, 0x28, 0x1d,
	0x86, 0x47, 0x1a, 0x42, 0x5f, 0x34, 0x02, 0xf7, 0xe4, 0x20, 0xf8, 0xed, 0x73, 0x02, 0x74, 0x9d,
	0xd8, 0xb7, 0x3f, 0x8e, 0x2c, 0x86, 0x93, 0x7e, 0x05, 0xce, 0xf4, 0x2d, 0xfe, 0x01, 0x4a, 0xeb,
	0x66, 0xd9, 0x5f, 0xa4, 0x97, 0xf7, 0xd2, 0x5a, 0x64, 0xf4, 0x04, 0xec, 0x34, 0x51, 0x79, 0x63,
	0x36, 0xfa, 0x93, 0x62, 0x92, 0xa8, 0xbc, 0x91, 0x98, 0x59, 0xff, 0x4b, 0x0f, 0x06, 0x86, 0xd2,
	0x43, 0xd8, 0x55, 0x75, 0xaa, 0x05, 0xff, 0xa8, 0x8c, 0xa7, 0xcd, 0xda, 0x1a, 0x7b, 0x9f, 0xea,
	0x64, 0xa6, 0xeb, 0x4a, 0x99, 0xed, 0x36, 0x6b, 0x6b, 0xba, 0x0f, 0x83, 0x0f, 0x65, 0x52, 0xa8,
	0x51, 0xdf, 0xe4, 0xb5, 0x29, 0xe8, 0x18, 0x86, 0x4a, 0xcb, 0x79, 0xdc, 0xae, 0xb4, 0x51, 0x76,
	0x66, 0xb1, 0x87, 0x88, 0xdf, 0x35, 0xf4, 0x86, 0x10, 0xfa, 0x14, 0x86, 0x85, 0x94, 0x59, 0xac,
	0x45, 0x19, 0x6b, 0x51, 0xe5, 0xa3, 0x01, 0x86, 0x7b, 0x46, 0x98, 0x8b, 0xf8, 0x42, 0x94, 0x17,
	0xa2, 0xca, 0x9b, 0x41, 0xc9, 0x65, 0x7c, 0x7f, 0x0b, 0x8e, 0x19, 0xec, 0x31, 0x57, 0x72, 0xf9,
	0xba, 0xb9, 0x8a, 0x1b, 0x42, 0x26, 0x7b, 0xf0, 0x28, 0xee, 0x98, 0x1b, 0xd2, 0x31, 0x31, 0xa4,
	0xb3, 0xcd, 0xff, 0x46, 0xc0, 0x9d, 0x9e, 0x97, 0x09, 0xcf, 0xdb, 0xf8, 0xc5, 0xbf, 0xe3, 0xef,
	0xde, 0xdc, 0xff, 0xc4, 0x4f, 0x8f, 0xc0, 0x9d, 0xa3, 0x65, 0xbc, 0x1d, 0x21, 0x18, 0xf4, 0x06,
	0xc9, 0xe4, 0xfc, 0x76, 0xe5, 0x91, 0xbb, 0x95, 0x47, 0x7e, 0xae, 0x3c, 0xf2, 0x75, 0xed, 0x59,
	0x77, 0x6b, 0xcf, 0xfa, 0xbe, 0xf6, 0xac, 0xf7, 0x2f, 0x0b, 0xa1, 0xaf, 0xea, 0x34, 0xe0, 0xb2,
	0x0a, 0x3b, 0xaf, 0xe0, 0xf3, 0x8b, 0x67, 0xfc, 0x2a, 0x11, 0xb3, 0xb0, 0x25, 0xcb, 0xcd, 0xcb,
	0xd0, 0xd7, 0xf3, 0x5c, 0xa5, 0x8e, 0xc1, 0xcf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x94, 0xd5,
	0xe4, 0xc8, 0x3b, 0x03, 0x00, 0x00,
}

func (m *XIID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XIID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XIID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ClientId))
		i--
		dAtA[i] = 0x15
	}
	if m.ClobId != 0 {
		i = encodeVarintXorder(dAtA, i, uint64(m.ClobId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XUID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XUID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XUID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintXorder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Sid != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sid))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *XOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintXorder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Uid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintXorder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *XBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XOcoClientId != nil {
		{
			size := m.XOcoClientId.Size()
			i -= size
			if _, err := m.XOcoClientId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XGoodTilTime != nil {
		{
			size := m.XGoodTilTime.Size()
			i -= size
			if _, err := m.XGoodTilTime.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XStopSubticks != nil {
		{
			size := m.XStopSubticks.Size()
			i -= size
			if _, err := m.XStopSubticks.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Flags != 0 {
		i = encodeVarintXorder(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x18
	}
	if m.Quantums != 0 {
		i = encodeVarintXorder(dAtA, i, uint64(m.Quantums))
		i--
		dAtA[i] = 0x10
	}
	if m.Subticks != 0 {
		i = encodeVarintXorder(dAtA, i, uint64(m.Subticks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XBase_StopSubticks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XBase_StopSubticks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintXorder(dAtA, i, uint64(m.StopSubticks))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *XBase_GoodTilTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XBase_GoodTilTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.GoodTilTime))
	i--
	dAtA[i] = 0x2d
	return len(dAtA) - i, nil
}
func (m *XBase_OcoClientId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XBase_OcoClientId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.OcoClientId))
	i--
	dAtA[i] = 0x35
	return len(dAtA) - i, nil
}
func (m *XPlaceOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XPlaceOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XPlaceOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlaceFlags != 0 {
		i = encodeVarintXorder(dAtA, i, uint64(m.PlaceFlags))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintXorder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintXorder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintXorder(dAtA []byte, offset int, v uint64) int {
	offset -= sovXorder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *XIID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClobId != 0 {
		n += 1 + sovXorder(uint64(m.ClobId))
	}
	if m.ClientId != 0 {
		n += 5
	}
	return n
}

func (m *XUID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 9
	}
	l = m.Iid.Size()
	n += 1 + l + sovXorder(uint64(l))
	return n
}

func (m *XOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Uid.Size()
	n += 1 + l + sovXorder(uint64(l))
	l = m.Base.Size()
	n += 1 + l + sovXorder(uint64(l))
	return n
}

func (m *XBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subticks != 0 {
		n += 1 + sovXorder(uint64(m.Subticks))
	}
	if m.Quantums != 0 {
		n += 1 + sovXorder(uint64(m.Quantums))
	}
	if m.Flags != 0 {
		n += 1 + sovXorder(uint64(m.Flags))
	}
	if m.XStopSubticks != nil {
		n += m.XStopSubticks.Size()
	}
	if m.XGoodTilTime != nil {
		n += m.XGoodTilTime.Size()
	}
	if m.XOcoClientId != nil {
		n += m.XOcoClientId.Size()
	}
	return n
}

func (m *XBase_StopSubticks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovXorder(uint64(m.StopSubticks))
	return n
}
func (m *XBase_GoodTilTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *XBase_OcoClientId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *XPlaceOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Iid.Size()
	n += 1 + l + sovXorder(uint64(l))
	l = m.Base.Size()
	n += 1 + l + sovXorder(uint64(l))
	if m.PlaceFlags != 0 {
		n += 1 + sovXorder(uint64(m.PlaceFlags))
	}
	return n
}

func sovXorder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozXorder(x uint64) (n int) {
	return sovXorder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XIID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXorder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XIID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XIID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobId", wireType)
			}
			m.ClobId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClobId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipXorder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXorder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XUID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXorder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XUID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XUID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXorder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXorder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXorder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXorder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXorder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXorder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXorder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Uid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXorder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXorder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXorder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXorder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXorder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subticks", wireType)
			}
			m.Subticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantums", wireType)
			}
			m.Quantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopSubticks", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XStopSubticks = &XBase_StopSubticks{v}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodTilTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.XGoodTilTime = &XBase_GoodTilTime{v}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcoClientId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.XOcoClientId = &XBase_OcoClientId{v}
		default:
			iNdEx = preIndex
			skippy, err := skipXorder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXorder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XPlaceOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXorder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XPlaceOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XPlaceOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXorder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXorder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXorder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXorder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceFlags", wireType)
			}
			m.PlaceFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlaceFlags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXorder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXorder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXorder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXorder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXorder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthXorder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupXorder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthXorder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthXorder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXorder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupXorder = fmt.Errorf("proto: unexpected end of group")
)
