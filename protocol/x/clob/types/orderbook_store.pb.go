// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/clob/orderbook_store.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LevelStore struct {
	Subticks uint64 `protobuf:"varint,1,opt,name=subticks,proto3" json:"subticks,omitempty"`
	// No need to store signature, because all orders are in state.
	Orders []Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders"`
}

func (m *LevelStore) Reset()         { *m = LevelStore{} }
func (m *LevelStore) String() string { return proto.CompactTextString(m) }
func (*LevelStore) ProtoMessage()    {}
func (*LevelStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_44dec228cc719b1a, []int{0}
}
func (m *LevelStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelStore.Merge(m, src)
}
func (m *LevelStore) XXX_Size() int {
	return m.Size()
}
func (m *LevelStore) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelStore.DiscardUnknown(m)
}

var xxx_messageInfo_LevelStore proto.InternalMessageInfo

func (m *LevelStore) GetSubticks() uint64 {
	if m != nil {
		return m.Subticks
	}
	return 0
}

func (m *LevelStore) GetOrders() []Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrderbookStore struct {
	SubticksPerTick      uint32       `protobuf:"varint,1,opt,name=subticks_per_tick,json=subticksPerTick,proto3" json:"subticks_per_tick,omitempty"`
	Bids                 []LevelStore `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids"`
	Asks                 []LevelStore `protobuf:"bytes,3,rep,name=asks,proto3" json:"asks"`
	MinOrderBaseQuantums uint64       `protobuf:"varint,4,opt,name=min_order_base_quantums,json=minOrderBaseQuantums,proto3" json:"min_order_base_quantums,omitempty"`
}

func (m *OrderbookStore) Reset()         { *m = OrderbookStore{} }
func (m *OrderbookStore) String() string { return proto.CompactTextString(m) }
func (*OrderbookStore) ProtoMessage()    {}
func (*OrderbookStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_44dec228cc719b1a, []int{1}
}
func (m *OrderbookStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderbookStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderbookStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderbookStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderbookStore.Merge(m, src)
}
func (m *OrderbookStore) XXX_Size() int {
	return m.Size()
}
func (m *OrderbookStore) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderbookStore.DiscardUnknown(m)
}

var xxx_messageInfo_OrderbookStore proto.InternalMessageInfo

func (m *OrderbookStore) GetSubticksPerTick() uint32 {
	if m != nil {
		return m.SubticksPerTick
	}
	return 0
}

func (m *OrderbookStore) GetBids() []LevelStore {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *OrderbookStore) GetAsks() []LevelStore {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *OrderbookStore) GetMinOrderBaseQuantums() uint64 {
	if m != nil {
		return m.MinOrderBaseQuantums
	}
	return 0
}

func init() {
	proto.RegisterType((*LevelStore)(nil), "dydxprotocol.clob.LevelStore")
	proto.RegisterType((*OrderbookStore)(nil), "dydxprotocol.clob.OrderbookStore")
}

func init() {
	proto.RegisterFile("dydxprotocol/clob/orderbook_store.proto", fileDescriptor_44dec228cc719b1a)
}

var fileDescriptor_44dec228cc719b1a = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0x6e, 0x5d, 0x19, 0x12, 0x51, 0x59, 0x19, 0x58, 0x06, 0x8b, 0x63, 0x17, 0x87, 0x60, 0x0b,
	0xfe, 0x98, 0xf7, 0x9d, 0x85, 0xcd, 0xe9, 0xc9, 0x4b, 0x6c, 0xd2, 0xb0, 0x85, 0xae, 0xcd, 0x4c,
	0xd2, 0xb1, 0xfd, 0x17, 0xfe, 0x59, 0x3b, 0xee, 0xe8, 0x49, 0x64, 0xc3, 0xff, 0x43, 0x92, 0xb6,
	0x53, 0x51, 0x0f, 0xde, 0x5e, 0xde, 0xf7, 0x7d, 0xef, 0xfb, 0x5e, 0x1e, 0x38, 0x89, 0x16, 0xd1,
	0x7c, 0x2a, 0xb8, 0xe2, 0x84, 0x4f, 0x02, 0x32, 0xe1, 0x38, 0xe0, 0x22, 0xa2, 0x02, 0x73, 0x1e,
	0x23, 0xa9, 0xb8, 0xa0, 0xbe, 0x41, 0xdd, 0xda, 0x57, 0xa2, 0xaf, 0x89, 0x8d, 0xfa, 0x88, 0x8f,
	0xb8, 0x69, 0x05, 0xba, 0xca, 0x89, 0x8d, 0xe6, 0x1f, 0x13, 0x73, 0xb8, 0xfd, 0x08, 0xc0, 0x0d,
	0x9d, 0xd1, 0xc9, 0x9d, 0x9e, 0xed, 0x36, 0xc0, 0xae, 0xcc, 0xb0, 0x62, 0x24, 0x96, 0x9e, 0xdd,
	0xb2, 0x3b, 0xce, 0x70, 0xfb, 0x76, 0xbb, 0xa0, 0x6a, 0x84, 0xd2, 0xdb, 0x69, 0x55, 0x3a, 0x7b,
	0xe7, 0x9e, 0xff, 0x23, 0x82, 0xdf, 0xd7, 0x84, 0x9e, 0xb3, 0x7c, 0x3d, 0xb6, 0x86, 0x05, 0xbb,
	0xfd, 0x6e, 0x83, 0x83, 0x7e, 0xb9, 0x43, 0x6e, 0x73, 0x0a, 0x6a, 0xe5, 0x58, 0x34, 0xa5, 0x02,
	0xe9, 0xca, 0xf8, 0xed, 0x0f, 0x0f, 0x4b, 0x60, 0x40, 0xc5, 0x3d, 0x23, 0xb1, 0x7b, 0x0d, 0x1c,
	0xcc, 0xa2, 0xd2, 0xb4, 0xf9, 0x8b, 0xe9, 0x67, 0xfe, 0xc2, 0xd9, 0x08, 0xb4, 0x30, 0x94, 0xb1,
	0xf4, 0x2a, 0xff, 0x10, 0x6a, 0x81, 0x7b, 0x05, 0x8e, 0x12, 0x96, 0x22, 0x13, 0x1f, 0xe1, 0x50,
	0x52, 0xf4, 0x94, 0x85, 0xa9, 0xca, 0x12, 0xe9, 0x39, 0xe6, 0x4f, 0xea, 0x09, 0x4b, 0xf3, 0x4d,
	0x43, 0x49, 0x6f, 0x0b, 0xac, 0x37, 0x58, 0xae, 0xa1, 0xbd, 0x5a, 0x43, 0xfb, 0x6d, 0x0d, 0xed,
	0xe7, 0x0d, 0xb4, 0x56, 0x1b, 0x68, 0xbd, 0x6c, 0xa0, 0xf5, 0xd0, 0x1d, 0x31, 0x35, 0xce, 0xb0,
	0x4f, 0x78, 0x12, 0x7c, 0xbb, 0xc6, 0xec, 0xf2, 0x8c, 0x8c, 0x43, 0x96, 0x06, 0xdb, 0xce, 0x3c,
	0xbf, 0x90, 0x5a, 0x4c, 0xa9, 0xc4, 0x55, 0xd3, 0xbe, 0xf8, 0x08, 0x00, 0x00, 0xff, 0xff, 0x39,
	0xcb, 0xd0, 0x8d, 0x15, 0x02, 0x00, 0x00,
}

func (m *LevelStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbookStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Subticks != 0 {
		i = encodeVarintOrderbookStore(dAtA, i, uint64(m.Subticks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderbookStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderbookStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderbookStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinOrderBaseQuantums != 0 {
		i = encodeVarintOrderbookStore(dAtA, i, uint64(m.MinOrderBaseQuantums))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Asks) > 0 {
		for iNdEx := len(m.Asks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Asks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbookStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbookStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SubticksPerTick != 0 {
		i = encodeVarintOrderbookStore(dAtA, i, uint64(m.SubticksPerTick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderbookStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderbookStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LevelStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subticks != 0 {
		n += 1 + sovOrderbookStore(uint64(m.Subticks))
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrderbookStore(uint64(l))
		}
	}
	return n
}

func (m *OrderbookStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubticksPerTick != 0 {
		n += 1 + sovOrderbookStore(uint64(m.SubticksPerTick))
	}
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovOrderbookStore(uint64(l))
		}
	}
	if len(m.Asks) > 0 {
		for _, e := range m.Asks {
			l = e.Size()
			n += 1 + l + sovOrderbookStore(uint64(l))
		}
	}
	if m.MinOrderBaseQuantums != 0 {
		n += 1 + sovOrderbookStore(uint64(m.MinOrderBaseQuantums))
	}
	return n
}

func sovOrderbookStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderbookStore(x uint64) (n int) {
	return sovOrderbookStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LevelStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbookStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subticks", wireType)
			}
			m.Subticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbookStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbookStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbookStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbookStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbookStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbookStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderbookStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbookStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderbookStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderbookStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubticksPerTick", wireType)
			}
			m.SubticksPerTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbookStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubticksPerTick |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbookStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbookStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbookStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, LevelStore{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbookStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbookStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbookStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asks = append(m.Asks, LevelStore{})
			if err := m.Asks[len(m.Asks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderBaseQuantums", wireType)
			}
			m.MinOrderBaseQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbookStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinOrderBaseQuantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbookStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbookStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderbookStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderbookStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbookStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbookStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderbookStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderbookStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderbookStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderbookStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderbookStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderbookStore = fmt.Errorf("proto: unexpected end of group")
)
