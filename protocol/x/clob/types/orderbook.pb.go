// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/clob/orderbook.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LevelProto struct {
	Subticks uint64 `protobuf:"varint,1,opt,name=subticks,proto3" json:"subticks,omitempty"`
	// No need to store signature, because all orders are in state.
	Orders []*Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *LevelProto) Reset()         { *m = LevelProto{} }
func (m *LevelProto) String() string { return proto.CompactTextString(m) }
func (*LevelProto) ProtoMessage()    {}
func (*LevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_5897818054660845, []int{0}
}
func (m *LevelProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelProto.Merge(m, src)
}
func (m *LevelProto) XXX_Size() int {
	return m.Size()
}
func (m *LevelProto) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelProto.DiscardUnknown(m)
}

var xxx_messageInfo_LevelProto proto.InternalMessageInfo

func (m *LevelProto) GetSubticks() uint64 {
	if m != nil {
		return m.Subticks
	}
	return 0
}

func (m *LevelProto) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrderbookProto struct {
	SubticksPerTick uint32        `protobuf:"varint,1,opt,name=subticks_per_tick,json=subticksPerTick,proto3" json:"subticks_per_tick,omitempty"`
	Bids            []*LevelProto `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks            []*LevelProto `protobuf:"bytes,3,rep,name=asks,proto3" json:"asks,omitempty"`
	BestBid         uint64        `protobuf:"varint,4,opt,name=best_bid,json=bestBid,proto3" json:"best_bid,omitempty"`
	BestAsk         uint64        `protobuf:"varint,5,opt,name=best_ask,json=bestAsk,proto3" json:"best_ask,omitempty"`
}

func (m *OrderbookProto) Reset()         { *m = OrderbookProto{} }
func (m *OrderbookProto) String() string { return proto.CompactTextString(m) }
func (*OrderbookProto) ProtoMessage()    {}
func (*OrderbookProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_5897818054660845, []int{1}
}
func (m *OrderbookProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderbookProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderbookProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderbookProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderbookProto.Merge(m, src)
}
func (m *OrderbookProto) XXX_Size() int {
	return m.Size()
}
func (m *OrderbookProto) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderbookProto.DiscardUnknown(m)
}

var xxx_messageInfo_OrderbookProto proto.InternalMessageInfo

func (m *OrderbookProto) GetSubticksPerTick() uint32 {
	if m != nil {
		return m.SubticksPerTick
	}
	return 0
}

func (m *OrderbookProto) GetBids() []*LevelProto {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *OrderbookProto) GetAsks() []*LevelProto {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *OrderbookProto) GetBestBid() uint64 {
	if m != nil {
		return m.BestBid
	}
	return 0
}

func (m *OrderbookProto) GetBestAsk() uint64 {
	if m != nil {
		return m.BestAsk
	}
	return 0
}

func init() {
	proto.RegisterType((*LevelProto)(nil), "dydxprotocol.clob.LevelProto")
	proto.RegisterType((*OrderbookProto)(nil), "dydxprotocol.clob.OrderbookProto")
}

func init() { proto.RegisterFile("dydxprotocol/clob/orderbook.proto", fileDescriptor_5897818054660845) }

var fileDescriptor_5897818054660845 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x4f, 0xce, 0xc9, 0x4f, 0xd2, 0xcf, 0x2f,
	0x4a, 0x49, 0x2d, 0x4a, 0xca, 0xcf, 0xcf, 0xd6, 0x03, 0x8b, 0x0b, 0x09, 0x22, 0x2b, 0xd1, 0x03,
	0x29, 0x91, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x0b, 0xe9, 0x83, 0x58, 0x10, 0x85, 0x52, 0xb2,
	0x38, 0xcc, 0x82, 0x48, 0x2b, 0x45, 0x71, 0x71, 0xf9, 0xa4, 0x96, 0xa5, 0xe6, 0x04, 0x80, 0x4d,
	0x95, 0xe2, 0xe2, 0x28, 0x2e, 0x4d, 0x2a, 0xc9, 0x4c, 0xce, 0x2e, 0x96, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x09, 0x82, 0xf3, 0x85, 0x0c, 0xb8, 0xd8, 0xc0, 0x1a, 0x8b, 0x25, 0x98, 0x14, 0x98, 0x35,
	0xb8, 0x8d, 0x24, 0xf4, 0x30, 0x9c, 0xa0, 0xe7, 0x0f, 0x52, 0x10, 0x04, 0x55, 0xa7, 0x74, 0x83,
	0x91, 0x8b, 0xcf, 0x1f, 0xe6, 0x6e, 0x88, 0x05, 0x5a, 0x5c, 0x82, 0x30, 0x03, 0xe3, 0x0b, 0x52,
	0x8b, 0xe2, 0x41, 0x2c, 0xb0, 0x4d, 0xbc, 0x41, 0xfc, 0x30, 0x89, 0x80, 0xd4, 0xa2, 0x90, 0xcc,
	0xe4, 0x6c, 0x21, 0x43, 0x2e, 0x96, 0xa4, 0xcc, 0x14, 0x98, 0x75, 0xb2, 0x58, 0xac, 0x43, 0xb8,
	0x3c, 0x08, 0xac, 0x14, 0xa4, 0x25, 0xb1, 0x38, 0xbb, 0x58, 0x82, 0x99, 0x28, 0x2d, 0x20, 0xa5,
	0x42, 0x92, 0x5c, 0x1c, 0x49, 0xa9, 0xc5, 0x25, 0xf1, 0x49, 0x99, 0x29, 0x12, 0x2c, 0x60, 0x2f,
	0xb3, 0x83, 0xf8, 0x4e, 0x99, 0x29, 0x70, 0xa9, 0xc4, 0xe2, 0x6c, 0x09, 0x56, 0x84, 0x94, 0x63,
	0x71, 0xb6, 0x53, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x99, 0xa5,
	0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa3, 0x04, 0x7d, 0x99, 0x89, 0x6e,
	0x72, 0x46, 0x62, 0x66, 0x9e, 0x3e, 0x5c, 0xa4, 0x02, 0x12, 0x1d, 0x25, 0x95, 0x05, 0xa9, 0xc5,
	0x49, 0x6c, 0x60, 0x61, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0xbc, 0xb0, 0xc0, 0xfc,
	0x01, 0x00, 0x00,
}

func (m *LevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Subticks != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.Subticks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderbookProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderbookProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderbookProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BestAsk != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.BestAsk))
		i--
		dAtA[i] = 0x28
	}
	if m.BestBid != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.BestBid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Asks) > 0 {
		for iNdEx := len(m.Asks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Asks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SubticksPerTick != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.SubticksPerTick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderbook(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderbook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LevelProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subticks != 0 {
		n += 1 + sovOrderbook(uint64(m.Subticks))
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	return n
}

func (m *OrderbookProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubticksPerTick != 0 {
		n += 1 + sovOrderbook(uint64(m.SubticksPerTick))
	}
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	if len(m.Asks) > 0 {
		for _, e := range m.Asks {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	if m.BestBid != 0 {
		n += 1 + sovOrderbook(uint64(m.BestBid))
	}
	if m.BestAsk != 0 {
		n += 1 + sovOrderbook(uint64(m.BestAsk))
	}
	return n
}

func sovOrderbook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderbook(x uint64) (n int) {
	return sovOrderbook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subticks", wireType)
			}
			m.Subticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderbookProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderbookProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderbookProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubticksPerTick", wireType)
			}
			m.SubticksPerTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubticksPerTick |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &LevelProto{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asks = append(m.Asks, &LevelProto{})
			if err := m.Asks[len(m.Asks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestBid", wireType)
			}
			m.BestBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestAsk", wireType)
			}
			m.BestAsk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestAsk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderbook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderbook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderbook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderbook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderbook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderbook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderbook = fmt.Errorf("proto: unexpected end of group")
)
